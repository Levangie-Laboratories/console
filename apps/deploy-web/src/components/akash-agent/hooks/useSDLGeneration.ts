/**
 * @fileoverview Custom hook for SDL (Service Definition Language) processing and generation
 * 
 * This hook provides comprehensive SDL handling for the Akash Agent system:
 * - SDL extraction from various content formats (code blocks, plain text, etc.)
 * - SDL validation with proper structure checking
 * - Template creation for deployment integration
 * - Agent message processing for SDL detection
 * - State management for generated SDL content
 * 
 * 
 * @version 2.0.0
 * @since 2024-06-29
 */

import { useAtom } from 'jotai';
import { useCallback } from 'react';
import type { TemplateCreation } from '@src/types';
import {
  generatedSDLAtom,
  agentTemplateAtom,
  setGeneratedSDLAtom
} from '@src/store/agentStore';

/**
 * useSDLGeneration Hook
 * 
 * Comprehensive hook for processing, validating, and managing SDL (Service Definition Language)
 * content generated by the Akash AI Agent. Handles extraction from various formats and
 * creates deployment-ready templates.
 * 
 * @returns Object containing SDL state, validation, and processing functions
 * 
 * @features
 * - SDL Extraction: Finds SDL in code blocks, plain text, and mixed content
 * - Validation: Checks for required SDL structure (version, services, deployment)
 * - Template Creation: Converts SDL to deployment-ready TemplateCreation objects
 * - Agent Integration: Processes agent messages for SDL content automatically
 * - Format Support: Handles YAML code blocks, inline SDL, and file operations
 * - State Management: Maintains generated SDL and associated template data
 * - Error Handling: Robust parsing with fallback mechanisms
 * 
 * @example
 * ```tsx
 * const { 
 *   processAgentMessageForSDL, 
 *   validateSDL, 
 *   generatedSDL 
 * } = useSDLGeneration();
 * 
 * const handleAgentMessage = (content: string) => {
 *   const result = processAgentMessageForSDL(content);
 *   if (result.hasSDL) {
 *     onSDLGenerated(result.sdl, result.template);
 *   }
 * };
 * ```
 */
export const useSDLGeneration = () => {
  const [generatedSDL] = useAtom(generatedSDLAtom);
  const [agentTemplate] = useAtom(agentTemplateAtom);
  const [, setSDLData] = useAtom(setGeneratedSDLAtom);

  /**
   * Set generated SDL and create template
   */
  const setGeneratedSDL = useCallback((
    sdl: string, 
    options?: {
      title?: string;
      description?: string;
      category?: string;
    }
  ) => {
    const template: TemplateCreation = {
      title: options?.title || "AI Generated Deployment",
      code: `ai-agent-${Date.now()}`,
      category: options?.category || "AI Agent",
      description: options?.description || "Generated by Akash AI Agent",
      content: sdl
    };

    setSDLData(sdl, template);
  }, [setSDLData]);

  /**
   * Validate if content looks like valid SDL
   */
  const validateSDL = useCallback((content: string): boolean => {
    if (!content || typeof content !== 'string') {
      return false;
    }

    const trimmed = content.trim();
    
    // Basic SDL structure validation
    const hasVersion = /version:\s*["']?[0-9.]+["']?/i.test(trimmed);
    const hasServices = /services:/i.test(trimmed);
    const hasDeployment = /deployment:/i.test(trimmed);
    
    // Must have at least services section
    return hasServices && (hasVersion || hasDeployment);
  }, []);

  /**
   * Extract SDL from various content formats
   */
  const extractSDL = useCallback((content: string): string | null => {
    if (!content || typeof content !== 'string') {
      return null;
    }

    // Try to find YAML blocks in code fences
    const yamlBlockMatch = content.match(/```(?:yaml|yml)?\s*([\s\S]*?)\s*```/i);
    if (yamlBlockMatch) {
      const extracted = yamlBlockMatch[1].trim();
      if (validateSDL(extracted)) {
        return extracted;
      }
    }

    // Try to find SDL without code fences
    const lines = content.split('\n');
    let sdlLines: string[] = [];
    let inSDLSection = false;

    for (const line of lines) {
      // Start of SDL (version or services)
      if (/^(version|services):/i.test(line.trim())) {
        inSDLSection = true;
        sdlLines = [line];
        continue;
      }

      // If we're in SDL section, keep adding lines
      if (inSDLSection) {
        // Stop if we hit a markdown header or other clear delimiter
        if (line.trim().startsWith('#') || line.trim().startsWith('```')) {
          break;
        }
        sdlLines.push(line);
      }
    }

    if (sdlLines.length > 0) {
      const extracted = sdlLines.join('\n').trim();
      if (validateSDL(extracted)) {
        return extracted;
      }
    }

    // If the entire content looks like SDL, return it
    if (validateSDL(content)) {
      return content.trim();
    }

    return null;
  }, [validateSDL]);

  /**
   * Process agent message for SDL content
   */
  const processAgentMessageForSDL = useCallback((
    content: string,
    actionType?: string
  ): { hasSDL: boolean; sdl?: string; template?: TemplateCreation } => {
    // Check if this is a file operation that might contain SDL
    const isFileOperation = actionType && ['create_file', 'modify_file'].includes(actionType);
    
    // Extract potential SDL
    const extractedSDL = extractSDL(content);
    
    if (extractedSDL) {
      const template: TemplateCreation = {
        title: isFileOperation ? "AI Generated SDL File" : "AI Generated Deployment",
        code: `ai-agent-${Date.now()}`,
        category: "AI Agent",
        description: `Generated by Akash AI Agent${actionType ? ` (${actionType})` : ''}`,
        content: extractedSDL
      };

      return {
        hasSDL: true,
        sdl: extractedSDL,
        template
      };
    }

    return { hasSDL: false };
  }, [extractSDL]);

  /**
   * Clear generated SDL data
   */
  const clearSDL = useCallback(() => {
    setSDLData('', undefined);
  }, [setSDLData]);

  /**
   * Create template from current SDL
   */
  const createTemplateFromSDL = useCallback((
    customOptions?: {
      title?: string;
      description?: string;
      category?: string;
    }
  ): TemplateCreation | null => {
    if (!generatedSDL) {
      return null;
    }

    return {
      title: customOptions?.title || agentTemplate?.title || "AI Generated Deployment",
      code: `ai-agent-${Date.now()}`,
      category: customOptions?.category || agentTemplate?.category || "AI Agent",
      description: customOptions?.description || agentTemplate?.description || "Generated by Akash AI Agent",
      content: generatedSDL
    };
  }, [generatedSDL, agentTemplate]);

  return {
    // State
    generatedSDL,
    agentTemplate,
    hasGeneratedSDL: !!generatedSDL,
    
    // Actions
    setGeneratedSDL,
    clearSDL,
    
    // Utilities
    validateSDL,
    extractSDL,
    processAgentMessageForSDL,
    createTemplateFromSDL
  };
};